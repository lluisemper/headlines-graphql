{"version":3,"sources":["pictures/breaking.png","Components/HeadLineItem/HeadLineItem.js","Components/HeadLineList/HeadLineList.js","Components/SearchBar/SearchBar.js","apiService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeadLineItem","headline","className","onClick","window","open","url","newspaper","HeadLineList","headlines","id","filter","locale","map","key","SearchBar","onSearchQueryUpdate","useState","searchInput","setSearchInput","type","value","onChange","e","target","client","ApolloClient","link","HttpLink","uri","credentials","cache","InMemoryCache","query","gql","errorPolicy","App","setHeadline","searchQuery","setSearchQuery","headlinesToShow","regex","RegExp","test","bySearchQuery","useEffect","apiService","then","result","data","catch","err","console","error","log","undefined","length","src","breakingNews","alt","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1a68d4e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/breaking.74cc15d9.png\";","import React from 'react';\nimport './style.css';\n\nfunction HeadLineItem ({ headline }) {\n\n  return (\n    <div className=\"HeadLineItem\" onClick={() => {\n      window.open(headline.url);\n    }\n    }>\n      <div className=\"headline\">{headline.headline}</div>\n      <h4 className='newspaper'>{headline.newspaper}</h4>\n    </div>\n  );\n}\n\nexport default HeadLineItem;\n","import React from 'react';\nimport './style.css';\nimport HeadLineItem from '../HeadLineItem/HeadLineItem';\n\n\nfunction HeadLineList ({ headlines }) {\n\n  return (\n    <div className=\"HeadLineList\">\n      <div className='flag' id=\"flagSpain\"></div>\n      <div className=\"wrapper wrapper-spain\">\n        {headlines\n          .filter(headline => headline.locale === 'es-ES')\n          .map(headline => <HeadLineItem key={headline.url} headline={headline} />\n        )}\n      </div>\n      <div className='flag' id=\"flagUK\"></div>\n      <div className=\"wrapper\">\n        {headlines\n          .filter(headline => headline.locale === 'en-GB')\n          .map(headline => <HeadLineItem key={headline.url} headline={headline} />\n          )}\n      </div>\n      <div className='flag' id=\"flagNL\"></div>\n      <div className=\"wrapper\">\n        {headlines\n          .filter(headline => headline.locale === 'nl-NL')\n          .map(headline => <HeadLineItem key={headline.url} headline={headline} />\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default HeadLineList;\n","import React, {useState} from 'react';\nimport './SearchBar.css';\n\nconst SearchBar = ({onSearchQueryUpdate}) => {\n\n  const [searchInput, setSearchInput] = useState('');\n  \n  const handleSubmit = () => {\n    onSearchQueryUpdate(searchInput);\n  }\n\n  return (\n    <div className=\"SearchBar\">\n      <input className=\"search-bar\" type=\"text\"\n        value={searchInput}\n        onChange={e => setSearchInput(e.target.value)} />\n        <button className=\"search-button\" type=\"submit\"\n          onClick={handleSubmit}>search</button>      \n    </div>\n      );\n    }\n    \n    export default SearchBar;\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { gql } from \"apollo-boost\";\nimport { HttpLink } from 'apollo-link-http';\n\n\nconst client = new ApolloClient({\n  link:new HttpLink(\n    {\n      uri: \"/graphql\",\n\n      credentials: 'include'\n    }),\n    cache: new InMemoryCache()\n});\n\nexport default {\n\n  fetchdata: () => {\n    return client\n      .query({\n        query: gql`\n      {\n        headline {\n          newspaper\n          headline\n          locale\n          url\n        }\n      }`\n      }, {\n        errorPolicy: \"all\"\n      })\n  }\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport HeadLineList from './Components/HeadLineList/HeadLineList.js';\nimport SearchBar from './Components/SearchBar/SearchBar';\nimport breakingNews from './pictures/breaking.png';\nimport apiService from './apiService';\n\nfunction bySearchQuery (query) {\n  const regex = new RegExp(query)\n  return headline => regex.test(headline.headline)\n}\n\nfunction App () {\n\n  const [headlines, setHeadline] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const headlinesToShow = searchQuery\n    ? headlines.filter(bySearchQuery(searchQuery))\n    : headlines\n\n  useEffect(() => {\n    apiService.fetchdata()\n      .then(result => {\n        setHeadline(result.data.headline)\n      })\n      .catch((err) => console.error(err))\n  }, []);\n\n  console.log('headlinesToShow', headlinesToShow);\n  return (\n\n    <div className=\"App\">\n      {headlinesToShow !== undefined && headlinesToShow.length !== 0\n        ? <div className=\"App\">\n          <img src={breakingNews} className=\"breakingNews\" alt=''></img>\n          <SearchBar onSearchQueryUpdate={setSearchQuery}></SearchBar>\n          <HeadLineList headlines={headlinesToShow} />\n        </div>\n        :\n        <div className=\"login\">\n          <div className=\"breakingSmall\"></div>\n          <div className=\"login-text\">\n            <a href= {\"/auth/google/\"}>login</a>\n          </div>\n        </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}